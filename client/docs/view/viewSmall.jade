template(name='viewSmall')
    // .ui.center.aligned.basic.basic.segment(class=viewSmallSegmentClass)
    .ui.segment
        // i.tags.icon
        .ui.huge.horizontal.list
            each tags
                .ui.large.compact.button.docTag(class=docTagClass)  #{this}
                // .item(class=docTagClass) #{this}
        // .ui.divider
        if body.length
            .description
                +markdown
                    !{body}
        .ui.hidden.divider
        unless isAuthor
            .ui.huge.icon.button.voteUp(class=voteUpButtonClass)
                i.thumbs.up.icon
            .ui.basic.large.label
                | #{points}
            .ui.huge.icon.button.voteDown(class=voteDownButtonClass)
                i.thumbs.down.icon
        if isAuthor
            .ui.basic.button.editDoc
                i.blue.pencil.icon
                |Edit
            // .ui.icon.basic.button.deleteDoc
            //     // |Delete
            //     i.red.trash.icon
        // .ui.basic.button.viewFull
        //     i.unhide.icon
        //     |View
        unless isAuthor
            h4 by #{username} [#{author.points} points] #{when}
            // h4 by #{username}
            // .ui.divider
            // h4.ui.header Matched Upvoted Tag List with #{username} (Count: #{upVotedMatchList.length})
            // each upVotedMatchList
            //     .ui.basic.label #{this}
            if currentUser
                h4.ui.header Upvoted Tag Cloud Match with #{username}
                h5 Match Points: #{upVotedMatchCloud.totalCount}
                each upVotedMatchCloud.cloud
                    .ui.basic.label #{this.tag} #{this.min}
            else
                p Log in to vote and match with #{username}'s tags
